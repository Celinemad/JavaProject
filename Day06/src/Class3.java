/*
 * 반복문의 필요성을 알게 해주는 예제
 * 1. 반복문 없이 "안녕하세요?" 메시지를 총 5번 출력하기
 * 1) 동일한(같은) 명령어를 반복 횟수 만큼 작성: 복붙
 * 2) 동일한(같은) 명령어를 한번만 작성 + 내용이 복잡해지는 형식: 나중에 바꿀 때 시간이 오래 소요 
 */
public class Class3 {

	public static void main(String[] args) {
		
		//1) println() 명령어를 5번 작성하기
		System.out.println("안녕하세요");
		System.out.println("안녕하세요");
		System.out.println("안녕하세요");
		System.out.println("안녕하세요");
		System.out.println("안녕하세요");
		// -> 단점: 중복(입력 시간이 오래 소요, 실수를 할 확률이 높음)
		
		//2) println() 명령어를 한번만 작성하기
		System.out.println("안녕하세요?\n안녕하세요?\n안녕하세요?\n안녕하세요?\n안녕하세요?");
		//-> 단점: 나중에 내용을 바꿀 때 오랜 시간이 소요
		//			-> 해결방법: 반복문을 사용
		
		/*
		 * 반복문의 종류
		 * 1. for 문: 기본적으로 반복횟수를 알고 있는 경우에 사용
		 * 2. while 문: 기본적으로 반복횟수를 모를 때 사용
		 * 3. do~while 문: 기본적으로 반복횟수를 모를 때 사용
		 * 		->  while 문과 do~while 문의 차이: while 문은 문장을 실행하기 전에 조건식을 먼저 실행, 
		 * 			do~while 문은 먼저 무조건 문장을 실행하고 나중에 조건식을 실행
		 */
		
		/*
		 * 4. for 문의 기본 형식: 
		 * for(초기식; 조건식; 변화식) 반복할_문장;
		 * 1) 초기식: 반복문 안에서만 사용할 변수에 값을 할당 (예: 데이터타입 변수명 = 값;)
		 * 		실제 예) for(int a=1;)
		 * 2) 조건식: 문장을 다시 실행할지를 결정하는 식, 주로 비교 연산자를 많이 사용 (예: 변수명 <= 마지막값)
		 * 		실제 예) for(int a=1; a<=5;)
		 * 3) 변화식: 초기식에서 선언한 변수의 값을 바꾸는 식, 주로 증감 연산자를 많이 사용(예: ++변수명 또는 --변수명)
		 * 		실제 예) for(int a=1; a<=5; ++a)
		 * 4) 실행 과정(흐름)
		 * 		가. 초기식 -> 조건식 -> 만약 조건식이 참이면 문장을 실행하고 위로 이동 -> 변화식을 실행 -> 다시 조건식으로 이동
		 * 						 -> 만약 조건식이 거짓이면 문장을 실행하지 않고 for 문 전체를 탈출(벗어남)
		 */
		//모니터 화면에 1 2 3 4 5를 출력하는 for문 작성
		//for(int a=시작값; a<=마지막값; ++a)
		for(int a=1; a<=5; ++a) {
			System.out.print(a+" ");
		}
	}

}
